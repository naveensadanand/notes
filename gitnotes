GIT Topics.
1. init, add, commit, push, pull, branch, checkout.
2. remote
3. clone
4. fetch
5. merge
6. stash
7. revert
8. rebase
9. reset
10. squash
11. cherry pick

What is Git?
Git is a software which keeps track of changes that you make in files and directory.
-especially test changes, 
-version 1, version 2, version 3
git can track/manager above version, can allow you to move back and forth version also allows you to check diff between those versions.

Since it manages versions, so it also called Version control system (VCS).

VCS can be used to Source code management (SCM).

Git is distributed Version control.
--Different users (or teams of users) each maintain their own repositories, instead of working from central repository.
--changes are stored as "change sets" or "patches"
	-focus on tracking changes not version of the documents.
	-different from CVS and SVN, which track versions to versions.
	-change sets can be exchanged between repositories.
		-"merge-in change sets" or "apply patches"
--No single master repository, just many working copies
	-Each with their own combination of change sets.
--Imagine changes to a document as sets A,B,C,D,E,F
	-Repo 1: A,B,C,D,E,F
	-Repo 2: A,B,C,D
	-Repo 3: A,B,C,E
	-Repo 4: A,B,E,F
--No need to communicate with a central server
	-faster (communication is not required with a central server)
	-no network access required (since we are not making any communication with server).


git init:
It initialiZes git project, it will create hidden .git directory.

This will make set-up home for git repository and track all files changes in this directory (.git directory).

commands and explanation.
1. git init
	a. It initialiZes git project, it will create hidden .git directory.
	b. By default it will create branch with the name master.

2. git status
	a. It gives the information of the branch to which git is currently pointing to.
	b. It gives the list of information of files which are needs to be get add using "git add".
	c. If the file gets added then it will give list of files that needs to be commit "git commit filename".

3. git add
	a. This command add file to working directory. This file is visible to all branches created under master branch.

4. git commit:
	a. It will commit the file to the staging area under particular branch. In general it will create an object.
	b. Its mandatory to give git commit message otherwise it will through below message.	
"c:\Dropbox\GIT\notes>git commit gitnotes
 Aborting commit due to empty commit message.
"
	c. If you are in branch x and you switched to your working branch, and you see below message, then you should add and commit the changes.
"Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)"

5. git log:
	a. This command will give detail information of repository. It will give detail information like
commit ID/object, auther, Date and Git commit message as well.

   git log --oneline:
	a. This command will give one line information of each commit message.

6. git branch branchname:
	a. This command will create new branch named branchname

7. git checkout branchname.
	a. This command will switch to branch called branchname.
If there is a local changes in current branch and you want to switch to other branch, then it will allow to switch to other branch and through below error.

"error: Your local changes to the following files would be overwritten by checkout:
        gitnotes
Please commit your changes or stash them before you can switch branches.
Aborting"
After commiting we can switch/checkout to other branch without git push, since commit file from other branch will not be appeared in other branch.

8. git merge:
a. Creating an edit collision:
This is the most common type of conflict. It happens when two branches have changed the same part of the same file, and then those branches are merged together. For example, if you make a change on a particular line in a file, and your colleague working in a repository makes a change on the exact same line, a merge conflict occurs. Git has trouble understanding which change should be used, so it asks you to help out.
When this sort of conflict occurs, Git writes a special block into the file that contains the contents of both versions where the conflict occurred. To complete this type of merge, use your text editor to resolve the conflict, then add the file and commit it to complete the merge.

 In branch-a, you wrote the word "nine," but your friend wrote "eight." Git automatically adds conflict markers to the affected areas. A conflict-marked area begins with <<<<<<< and ends with >>>>>>>. These are also known as the conflict markers. The two conflicting blocks themselves are divided by a =======.
You have several options here. You can either keep your changes, take your friend's changes, or make a brand new change. Whatever you do, you need to make sure to resolve the conflict such that the file makes sense, and everyone is happy.

In this case, you'll put in a whole new version of the line that reflects what happened. The goal is to get the file to look exactly how you want it. You'll delete the conflict markers, and just type out a new change:

b. Resolving a removed file conflict:
Removed file conflicts occur when one person edits a file, and another person deletes that file in their branch. Git does not know if you want to keep the file with the new edits, or delete the file and forget about those edits. 
To deal with this case, we do below scenario.
	1. Keeping the edited file: First, you'll resolve the conflict by keeping the new changes. Suppose that you added a line to your README.md in branch-b, but someone else has deleted the file entirely in branch-c. Git declares the following conflict:
"CONFLICT (modify/delete): README.md deleted in HEAD and modified in branch-b. Version branch-b of README.md left in tree.
Automatic merge failed; fix conflicts and then commit the result."
	Solution: You can resolve this by adding the file back, and committing it once more:

	2. Resolving by removing the file: Now, you'll resolve that conflict the opposite way: by leaving the file deleted. Again, with a merge conflict, Git declares:
"CONFLICT (modify/delete): README.md deleted in HEAD and modified in branch-c. Version branch-c of README.md left in tree.
Automatic merge failed; fix conflicts and then commit the result."
	Solution: Now, you want to remove the file, so do that with the git rm command:
	so commit it with the default message:

9. git remote
This command will through "origin" as output.

As you probably know, git is a distributed version control system. Most operations are done locally. To communicate with the outside world, git uses what are called remotes. These are repositories other than the one on your local disk which you can push your changes into (so that other people can see them) or pull from (so that you can get others changes). The command git remote add origin git@github.com:peter/first_app.git creates a new remote called origin located at git@github.com:peter/first_app.git. Once you do this, in your push commands, you can push to origin instead of typing out the whole URL.

remote = remote repository. Stuff that's on your hard drive is local. Stuff that's on GitHub's server is remote. origin = the default name of the remote repository on GitHub corresponding to the repo you're currently in on your machine. master = the default name of the initial branch of a repository. So, "origin master" is the default branch of your repository on GitHub. That's why you do git push origin master to update GitHub based on the changes you committed locally.

10. git clone:
command: git clone git@github.com:whatever .
The "." at the end specifies the current folder as the checkout folder.	
Note; If that directory is not empty, this doesn't work.
so you don't want to run "git init" in this folder before cloning into it. But if you did, then removing the .git folder before cloning will do the trick

go into folder.. if folder is empty, then

git clone git@github.com:whatever .
else

git init
git remote add origin PATH/TO/REPO
git fetch
git checkout -t origin/master


11. git fetch

Git fetch just updates your repo data, Fetch branches and/or tags (collectively, "refs") from one or more other repositories, along with the objects necessary to complete their histories.

12. git pull

Incorporates changes from a remote repository into the current branch. In its default mode, git pull is shorthand for git fetch followed by git merge FETCH_HEAD.
More precisely, git pull runs git fetch with the given parameters and calls git merge to merge the retrieved branch heads into the current branch. With --rebase, it runs git rebase instead of git merge.

Difference between fetch and pull.

a. In the simplest terms, git pull does a git fetch followed by a git merge.
You can do a git fetch at any time to update your remote-tracking branches under refs/remotes/<remote>/. This operation never changes any of your own local branches under refs/heads, and is safe to do without changing your working copy.

A git pull is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.

When you use pull, Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled commits into the branch you are currently working in.  pull automatically merges the commits without letting you review them first. If you donÂ’t closely manage your branches, you may run into frequent conflicts.
When you fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. To integrate the commits into your master branch, you use merge.

Link: https://longair.net/blog/2009/04/16/git-fetch-and-merge/

Note: DonÂ’t use git pull, use git fetch and then git merge.
The other problem is that by both fetching and merging in one command, your working directory is updated without giving you a chance to examine the changes youÂ’ve just brought into your repository. 

13. git merge
